{"version":3,"sources":["../src/shallowAssertions.js"],"names":[],"mappings":"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","file":"shallowAssertions.js","sourcesContent":["import RenderHook from 'react-render-hook';\nimport UnexpectedHtmlLike from 'unexpected-htmllike';\nimport ReactElementAdapter from 'unexpected-htmllike-jsx-adapter';\nimport React from 'react/addons';\n\nconst TestUtils = React.addons.TestUtils;\n\nconst PENDING_SHALLOW_EVENT_TYPE = Symbol('Pending shallow event');\n\n\nfunction installInto(expect) {\n\n    expect.addType({\n\n        name: 'ReactPendingShallowEvent',\n\n        base: 'object',\n\n        identify: function (value) {\n            return value && typeof value === 'object' && value.$$typeof === PENDING_SHALLOW_EVENT_TYPE;\n        }\n\n    });\n\n    \n    expect.addAssertion(['<ReactShallowRenderer> to have [exactly] rendered <ReactElement>',\n        '<ReactShallowRenderer> to have rendered [with all children] [with all wrappers] <ReactElement>'], function (expect, subject, renderOutput) {\n        var actual = subject.getRenderOutput();\n        return expect(actual, 'to have [exactly] rendered [with all children] [with all wrappers]', renderOutput);\n    });\n    \n    \n    expect.addAssertion(['<ReactElement> to have [exactly] rendered <ReactElement>',\n        '<ReactElement> to have rendered [with all children] [with all wrappers] <ReactElement>'], function (expect, subject, expected) {\n\n        const exactly = this.flags.exactly;\n        const withAllChildren = this.flags['with all children'];\n        const withAllWrappers = this.flags['with all wrappers'];\n\n        const adapter = new ReactElementAdapter();\n        const jsxHtmlLike = new UnexpectedHtmlLike(adapter);\n        if (!exactly) {\n            adapter.setOptions({ concatTextContent: true });\n        }\n\n        const options = {\n            diffWrappers: exactly || withAllWrappers,\n            diffExtraChildren: exactly || withAllChildren,\n            diffExtraAttributes: exactly,\n            diffExactClasses: false,\n            diffExtraClasses: exactly\n        };\n\n        const diffResult = jsxHtmlLike.diff(adapter, subject, expected, expect, options);\n\n        return jsxHtmlLike.withResult(diffResult, result => {\n\n            if (result.weight !== 0) {\n                return expect.fail({\n                    diff: function (output, diff, inspect) {\n                        return {\n                            diff: output.append(jsxHtmlLike.render(result, output.clone(), diff, inspect))\n                        };\n                    }\n                });\n            }\n        });\n\n    });\n\n    expect.addAssertion(['<ReactShallowRenderer> [not] to contain [exactly] <ReactElement|string>',\n        '<ReactShallowRenderer> [not] to contain [with all children] [with all wrappers] <ReactElement|string>'], function (expect, subject, renderOutput) {\n        var actual = subject.getRenderOutput();\n        return expect(actual, '[not] to contain [exactly] [with all children] [with all wrappers]', renderOutput);\n    });\n\n    expect.addAssertion(['<ReactElement> [not] to contain [exactly] <ReactElement|string>',\n        '<ReactElement> [not] to contain [with all children] [with all wrappers] <ReactElement|string>'], function (expect, subject, expected) {\n\n        var not = this.flags.not;\n        var exactly = this.flags.exactly;\n        var withAllChildren = this.flags['with all children'];\n        var withAllWrappers = this.flags['with all wrappers'];\n\n        var adapter = new ReactElementAdapter();\n        var jsxHtmlLike = new UnexpectedHtmlLike(adapter);\n        if (!exactly) {\n            adapter.setOptions({ concatTextContent: true });\n        }\n\n        var options = {\n            diffWrappers: exactly || withAllWrappers,\n            diffExtraChildren: exactly || withAllChildren,\n            diffExtraAttributes: exactly\n        };\n\n        const containsResult = jsxHtmlLike.contains(adapter, subject, expected, expect, options);\n\n        return jsxHtmlLike.withResult(containsResult, result => {\n\n            if (not) {\n                if (result.found) {\n                    expect.fail({\n                        diff: (output, diff, inspect) => {\n                            return {\n                                diff: output.error('but found the following match').nl().append(jsxHtmlLike.render(result.bestMatch, output.clone(), diff, inspect))\n                            };\n                        }\n                    });\n                }\n                return;\n            }\n\n            if (!result.found) {\n                expect.fail({\n                    diff: function (output, diff, inspect) {\n                        return {\n                            diff: output.error('the best match was').nl().append(jsxHtmlLike.render(result.bestMatch, output.clone(), diff, inspect))\n                        };\n                    }\n                });\n            }\n        });\n    });\n\n    expect.addAssertion(['<ReactElement> queried for [exactly] <ReactElement> <assertion>',\n        '<ReactElement> queried for [with all children] [with all wrapppers] <ReactElement> <assertion>'], function (expect, subject, query) {\n\n        var exactly = this.flags.exactly;\n        var withAllChildren = this.flags['with all children'];\n        var withAllWrappers = this.flags['with all wrappers'];\n\n        var adapter = new ReactElementAdapter();\n        var jsxHtmlLike = new UnexpectedHtmlLike(adapter);\n        if (!exactly) {\n            adapter.setOptions({ concatTextContent: true });\n        }\n\n        const options = {\n            diffWrappers: exactly || withAllWrappers,\n            diffExtraChildren: exactly || withAllChildren,\n            diffExtraAttributes: exactly,\n            diffExactClasses: exactly,\n            diffExtraClasses: exactly\n        };\n\n        const containsResult = jsxHtmlLike.contains(adapter, subject, query, expect, options);\n\n        return jsxHtmlLike.withResult(containsResult, function (result) {\n\n            if (!result.found) {\n                expect.fail({\n                    diff: (output, diff, inspect) => {\n                        const resultOutput = {\n                            diff: output.error('`queried for` found no match.')\n                        };\n                        if (result.bestMatch) {\n                            resultOutput.diff.error('  The best match was')\n                                .nl()\n                                .append(jsxHtmlLike.render(result.bestMatch, output.clone(), diff, inspect));\n                        }\n                        return resultOutput;\n                    }\n                });\n            }\n\n            expect.shift(result.bestMatchItem);\n        });\n    });\n\n    expect.addAssertion(['<ReactShallowRenderer> queried for [exactly] <ReactElement> <assertion>',\n        '<ReactShallowRenderer> queried for [with all children] [with all wrapppers] <ReactElement> <assertion>'\n    ], function (expect, subject, query, assertion) {\n        return expect.apply(expect,\n            [\n                subject.getRenderOutput(), 'queried for [exactly] [with all children] [with all wrappers]', query\n            ].concat(Array.prototype.slice.call(arguments, 3)));\n    });\n\n\n    expect.addAssertion('<ReactShallowRenderer> with event <string> <assertion>', function (expect, subject, eventName) {\n        expect.shift({\n            $$typeof: PENDING_SHALLOW_EVENT_TYPE,\n            renderer: subject,\n            eventName: eventName\n        });\n    });\n\n    expect.addAssertion('<ReactShallowRenderer> with event <string> <object> <assertion>', function (expect, subject, eventName, args) {\n        expect.shift({\n            $$typeof: PENDING_SHALLOW_EVENT_TYPE,\n            renderer: subject,\n            eventName: eventName,\n            eventArgs: args\n        });\n    });\n\n    expect.addAssertion('<ReactElement> with event <string> <assertion>', function (expect, subject, eventName) {\n\n        const renderer = TestUtils.createRenderer();\n        renderer.render(subject);\n\n        expect.shift({\n            $$typeof: PENDING_SHALLOW_EVENT_TYPE,\n            renderer: renderer,\n            eventName: eventName\n        });\n    });\n    \n    expect.addAssertion('<ReactElement> with event <string> <object> <assertion>', function (expect, subject, eventName, eventArgs) {\n\n        const renderer = TestUtils.createRenderer();\n        renderer.render(subject);\n\n        expect.shift({\n            $$typeof: PENDING_SHALLOW_EVENT_TYPE,\n            renderer: renderer,\n            eventName: eventName,\n            eventArgs: eventArgs\n        });\n    });\n    \n    \n    expect.addAssertion('<ReactPendingShallowEvent> on [exactly] [with all children] [with all wrappers] <ReactElement> <assertion>', function (expect, subject, target) {\n        const adapter = new ReactElementAdapter({ convertToString: true, concatTextContent: true });\n        const jsxHtmlLike = new UnexpectedHtmlLike(adapter);\n        const exactly = this.flags.exactly;\n        const withAllChildren = this.flags['with all children'];\n        const withAllWrappers = this.flags['with all wrappers'];\n        const containsResult = jsxHtmlLike.contains(adapter, subject.renderer.getRenderOutput(), target, expect, {\n            diffWrappers: exactly || withAllWrappers,\n            diffExtraChildren: exactly || withAllChildren,\n            diffExtraAttributes: exactly\n        });\n        return jsxHtmlLike.withResult(containsResult, result => {\n            if (!result.found) {\n                return expect.fail({\n                    diff: function (output, diff, inspect) {\n                        output.error('Could not find the target for the event. ');\n                        if (result.bestMatch) {\n                            output.error('The best match was').nl().nl().append(jsxHtmlLike.render(result.bestMatch, output.clone(), diff, inspect))\n                        }\n                        return output;\n                    }\n                })\n            }\n\n            const newSubject = Object.assign({}, subject, {\n                target: result.bestMatchItem\n            });\n            expect.shift(newSubject);\n        });\n    });\n    \n\n    function triggerEvent(renderer, target, eventName, eventArgs) {\n\n        if (!target) {\n            target = renderer.getRenderOutput();\n        }\n        \n        const handlerPropName = 'on' + eventName[0].toUpperCase() + eventName.substr(1);\n        const handler = target.props[handlerPropName];\n        if (typeof handler !== 'function') {\n            return expect.fail({\n                diff: function (output) {\n                    return output.error('No handler function prop ').text(\"'\" + handlerPropName + \"'\").error(' on the target element');\n\n                }\n            })\n        }\n        handler(eventArgs);\n        return renderer;\n    }\n    \n\n    expect.addAssertion('<ReactPendingShallowEvent> to have [exactly] rendered [with all children] [with all wrappers] <ReactElement>', function (expect, subject, expected) {\n\n        triggerEvent(subject.renderer, subject.target, subject.eventName, subject.eventArgs);\n        return expect(subject.renderer, 'to have [exactly] rendered [with all children] [with all wrappers]', expected);\n    });\n    \n    expect.addAssertion('<ReactPendingShallowEvent> [and] with event <string> <assertion>', function (expect, subject, eventName) {\n\n        triggerEvent(subject.renderer, subject.target, subject.eventName, subject.eventArgs);\n        return expect.shift({\n            $$typeof: PENDING_SHALLOW_EVENT_TYPE,\n            renderer: subject.renderer,\n            eventName: eventName\n        });\n    });\n\n    expect.addAssertion('<ReactPendingShallowEvent> [and] with event <string> <object> <assertion>', function (expect, subject, eventName, eventArgs) {\n\n        triggerEvent(subject.renderer, subject.target, subject.eventName, subject.eventArgs);\n        return expect.shift({\n            $$typeof: PENDING_SHALLOW_EVENT_TYPE,\n            renderer: subject.renderer,\n            eventName: eventName,\n            eventArgs: eventArgs\n        });\n    });\n    \n    expect.addAssertion(['<ReactPendingShallowEvent> to contain [exactly] <ReactElement>', \n        '<ReactPendingShallowEvent> to contain [with all children] [with all wrappers] <ReactElement>'], function (expect, subject, expected) {\n\n        triggerEvent(subject.renderer, subject.target, subject.eventName, subject.eventArgs);\n        return expect(subject.renderer, 'to contain [exactly] [with all children] [with all wrappers]', expected);\n    });\n    \n    \n    expect.addAssertion(['<ReactPendingShallowEvent> queried for [exactly] <ReactElement> <assertion>',\n        '<ReactPendingShallowEvent> queried for [with all children] [with all wrappers] <ReactElement> <assertion>'], function (expect, subject, expected) {\n\n        triggerEvent(subject.renderer, subject.target, subject.eventName, subject.eventArgs);\n        return expect.apply(expect, \n            [subject.renderer, 'queried for [exactly] [with all children] [with all wrappers]', expected]\n                .concat(Array.prototype.slice.call(arguments, 3)));\n    });\n\n\n    expect.addAssertion('<ReactElement> to equal <ReactElement>', function (expect, subject, value) {\n        return expect(subject, 'to have exactly rendered', value);\n    });\n    \n\n    expect.addAssertion('<ReactShallowRenderer> to equal <ReactElement>', function (expect, subject, value) {\n        return expect(subject.getRenderOutput(), 'to have exactly rendered', value);\n    });\n    \n\n    expect.addAssertion('<ReactElement> to satisfy <ReactElement>', function (expect, subject, renderOutput) {\n        return expect(subject, 'to have rendered', renderOutput);\n    });\n\n}\n\nexport { installInto };\n"]}